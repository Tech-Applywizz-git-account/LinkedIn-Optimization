// lib/export-utils.ts

/* ------------------------------------------------------------------
   Local type that matches what this file actually uses.
   (We avoid importing from ./optimization-engine since it doesn't
   export OptimizationResult in your project.)
------------------------------------------------------------------- */
export interface OptimizationResult {
  content: string;
  keywords: string[];
  suggestions?: string[];
}

export interface ExportData {
  targetRole: string;
  optimizationResults: Record<string, OptimizationResult>;
  exportDate: string;
  completedSections: number;
  totalKeywords: number;
}

export class LinkedInExporter {
  static generatePlainText(data: ExportData): string {
    const { targetRole, optimizationResults, exportDate } = data;

    let content = `LINKEDIN PROFILE OPTIMIZATION REPORT\n`;
    content += `Generated by ApplyWizz on ${exportDate}\n`;
    content += `Target Role: ${targetRole}\n`;
    content += `${"=".repeat(50)}\n\n`;

    // Headline
    if (optimizationResults.headline?.content) {
      content += `HEADLINE:\n${optimizationResults.headline.content}\n\n`;
    }

    // About
    if (optimizationResults.about?.content) {
      content += `ABOUT:\n${optimizationResults.about.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    // Experience
    if (optimizationResults.experience?.content) {
      content += `EXPERIENCE:\n${optimizationResults.experience.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    // Projects
    if (optimizationResults.projects?.content) {
      content += `PROJECTS:\n${optimizationResults.projects.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    // Education
    if (optimizationResults.education?.content) {
      content += `EDUCATION:\n${optimizationResults.education.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    // Skills
    if (optimizationResults.skills?.content) {
      content += `SKILLS:\n${optimizationResults.skills.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    // Certifications
    if (optimizationResults.certifications?.content) {
      content += `CERTIFICATIONS:\n${optimizationResults.certifications.content}\n\n`;
    }

    // Banner
    if (optimizationResults.banner?.content) {
      content += `BANNER CONCEPTS:\n${optimizationResults.banner.content}\n\n`;
    }

    // Keywords Summary
    const allKeywords = Object.values(optimizationResults)
      .flatMap((result) => (result?.keywords ?? []))
      .filter((keyword, index, arr) => arr.indexOf(keyword) === index);

    content += `KEYWORD SUMMARY:\n${allKeywords.join(", ")}\n\n`;
    content += `Total Keywords: ${allKeywords.length}\n`;
    content += `Sections Completed: ${data.completedSections}/8\n`;

    return content;
  }

  static generateLinkedInReady(data: ExportData): string {
    const { optimizationResults } = data;

    let content = `LINKEDIN PROFILE - COPY & PASTE READY\n`;
    content += `${"=".repeat(40)}\n\n`;

    if (optimizationResults.headline?.content) {
      content += `üìã HEADLINE (Copy this to your LinkedIn headline):\n`;
      content += `${optimizationResults.headline.content}\n\n`;
    }

    if (optimizationResults.about?.content) {
      content += `üìù ABOUT SECTION (Copy this to your LinkedIn About section):\n`;
      content += `${optimizationResults.about.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    if (optimizationResults.experience?.content) {
      content += `üíº EXPERIENCE (Update your job descriptions with this content):\n`;
      content += `${optimizationResults.experience.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    if (optimizationResults.skills?.content) {
      content += `üéØ SKILLS (Add these skills to your LinkedIn profile):\n`;
      content += `${optimizationResults.skills.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;
    }

    return content;
  }

  static generateHTML(data: ExportData): string {
    const { targetRole, optimizationResults, exportDate } = data;

    let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LinkedIn Profile Optimization - ${targetRole}</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #0077b5, #005885); color: white; padding: 30px; border-radius: 10px; margin-bottom: 30px; }
        .section { background: #f8f9fa; padding: 20px; margin-bottom: 20px; border-radius: 8px; border-left: 4px solid #0077b5; }
        .section h2 { color: #0077b5; margin-top: 0; }
        .keywords { display: flex; flex-wrap: wrap; gap: 8px; margin-top: 10px; }
        .keyword { background: #e3f2fd; color: #1976d2; padding: 4px 8px; border-radius: 4px; font-size: 12px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 30px; }
        .stat-card { background: white; padding: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .stat-number { font-size: 2em; font-weight: bold; color: #0077b5; }
    </style>
</head>
<body>
    <div class="header">
        <h1>LinkedIn Profile Optimization Report</h1>
        <p>Target Role: ${targetRole}</p>
        <p>Generated by ApplyWizz on ${exportDate}</p>
    </div>`;

    const sections = [
      { id: "headline", title: "LinkedIn Headline", icon: "üìã" },
      { id: "about", title: "About Section", icon: "üìù" },
      { id: "experience", title: "Experience", icon: "üíº" },
      { id: "projects", title: "Projects", icon: "üöÄ" },
      { id: "education", title: "Education", icon: "üéì" },
      { id: "skills", title: "Skills & Endorsements", icon: "üéØ" },
      { id: "certifications", title: "Certifications", icon: "üèÜ" },
      { id: "banner", title: "Banner Concepts", icon: "üé®" },
    ] as const;

    sections.forEach((section) => {
      const result = optimizationResults[section.id];
      if (result?.content) {
        html += `
    <div class="section">
        <h2>${section.icon} ${section.title}</h2>
        <div>${result.content
          .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
          .replace(/\n/g, "<br>")}</div>
        ${
          (result.keywords?.length ?? 0) > 0
            ? `
        <div class="keywords">
            ${result.keywords.map((keyword: string) => `<span class="keyword">${keyword}</span>`).join("")}
        </div>`
            : ""
        }
    </div>`;
      }
    });

    const totalKeywords = Object.values(optimizationResults)
      .flatMap((result) => (result?.keywords ?? []))
      .filter((keyword, index, arr) => arr.indexOf(keyword) === index).length;

    html += `
    <div class="stats">
        <div class="stat-card">
            <div class="stat-number">${data.completedSections}</div>
            <div>Sections Optimized</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${totalKeywords}</div>
            <div>Unique Keywords</div>
        </div>
        <div class="stat-card">
            <div class="stat-number">${Math.round((data.completedSections / 8) * 100)}%</div>
            <div>Profile Complete</div>
        </div>
    </div>
</body>
</html>`;

    return html;
  }

  static downloadFile(content: string, filename: string, mimeType: string) {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }

  static async copyToClipboard(content: string): Promise<boolean> {
    try {
      await navigator.clipboard.writeText(content);
      return true;
    } catch (error) {
      console.error("Failed to copy to clipboard:", error);
      return false;
    }
  }

  static generateSectionExport(sectionId: string, result: OptimizationResult, targetRole: string): string {
    const sectionNames: Record<string, string> = {
      headline: "LinkedIn Headline",
      about: "About Section",
      experience: "Experience",
      projects: "Projects",
      education: "Education",
      skills: "Skills",
      certifications: "Certifications",
      banner: "Banner Concepts",
    };

    let content = `${sectionNames[sectionId] || sectionId.toUpperCase()}\n`;
    content += `Target Role: ${targetRole}\n`;
    content += `Generated by ApplyWizz\n`;
    content += `${"=".repeat(40)}\n\n`;
    content += `${result.content.replace(/\*\*(.*?)\*\*/g, "$1")}\n\n`;

    if ((result.keywords?.length ?? 0) > 0) {
      content += `KEYWORDS:\n${result.keywords.join(", ")}\n\n`;
    }

    if (result.suggestions && result.suggestions.length > 0) {
      content += `SUGGESTIONS:\n${result.suggestions.map((s: string) => `‚Ä¢ ${s}`).join("\n")}\n`;
    }

    return content;
  }
}
